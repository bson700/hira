4일차

## AOP

Proxy

---

@Autowired
private TimeMapper timeMapper;

log.info(timeMapper); // INFO org.apache.ibatis.binding.MapperProxy@ab20d7c

//진짜 클래스의 이름
log.info(timeMapper.getClass().getName()); // INFO jdk.proxy2.$Proxy33

// instanceof 연산자로 if 체크하면 안된다.
// timeMapper.getClass().getName() 를 사용해야 한다.

---

자동으로 만들어지는 것을 auto proxy 라고 한다. spring 2 부터 도입되었다.

p83

aspectjweaver
aspectjrt

※ 프로 요리사는 재료를 준비하고 요리한다.

공통의 작업을 공통 관심사 혹은 횡단 관심사라고 한다.
핵심로직은 아닌데 필요한 로직이다.
예를 들면, JDBC 연결/연결해제.
공통 관심사를 분리해 낼때 프록시 이용.

① 로그 찍는거, ② 트랙잭션 설정하는 거만 알면 된다.

사용자가 떠나는 반응시간 기준: 7초
사내 기준 3초: 사내 7초여야 외부 7초

* log 가 Advice
  - Advice: Aspect에 대한 실제 구현체를 의미합니다.
  - Target: Aspect의 적용 대상이 되는 객체
  - Proxy: Advice + Target. Spring AOP는 자동으로 Proxy 객체를 생성할 수 있습니다

* Advice: 개발자들이 만드는 코드
  Aspect: 기능 자체

/s1/src/main/java/kr/or/hira/aop/LogAdvice.java // p.87 코드
/s1/src/main/java/kr/or/hira/service/BoardService.java

	<context:component-scan
		base-package="kr.or.hira.service"></context:component-scan>
	<context:component-scan
		base-package="kr.or.hira.aop"></context:component-scan>

	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

* 코드의 일부분을 어드바이스로 뜯어내고, 이를 어디에 적용할지 지정한다.

* @Before("execution(* kr.or.hira.service.*.*(..))")
  - 원하는 클래스, 메소드를 선택할 수 있다.
  - Joint Point: 연결할 수 있는 관절
  - kr.or.hira.service.*.*(..) : 이걸 Pointcut 이라고 함

list?page=3&size=30&types=TCW&keyword=44

* p93

* kr.or.hira.aop.LogAdvice kr.or.hira.aop.LogAdvice.logTime(LogAdvice.java:43)  INFO TIME: 270

* @Before : 파라미터 체크만 할때 사용하고 싶다.
  @Around : 성능 체크할 때 사용하고 싶다.
  -> 둘 중 하나만 사용하고 싶다.

* 개발 환경 -> 테스트 환경 -> 운영 환경
  - 테스트 DB에 운영 DB의 일부를 넣어서 테스트: 쿼리 성능 등
  - 3~4달 운영하다가 AOP 걷어냄

* 트랜잭션: All or Nothing

* PG(Payment Gateway) : 카드사 연동. TOSS, KakaoPay
  -> 이때 트랜잭션 필요

* Vector DB
  - JPA QueryDSL 대체할 수도. Like 검색 대체.
  - 검색은 MyBatis 이용 계속

* MyBatis
  - 두 메서드를 트랜잭션 처리

* p96 DataSourceTransactionManager : 시험문제 ★★★

<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
<property name="dataSource" ref="dataSource"/>
</bean>

<tx:annotation-driven />

* 트랜잭션
  - 반정규화 이유: 성능(Join 회피). 댓글의 숫자(Join > Group by > Count 필요).
  -> 반정규화의 경우가 트랜잭션의 대상이 될 가능성이 높다.

* p96

* @Transactional 는 3군데서 사용할 수 있다.
  1) 
  2) 
  3) 

* Annotation 클래스, 인터페이스, 메서드에 적용할 수 있다.

* list 가져올때 쿼리 2번: count 가져오는 쿼리, 리스트 가져오는 쿼리
  -> count 가져오는 쿼리를 안할 수 있다.

* @Transactional(readOnly = true)
  - JPA 할 때는 dirty checking 을 막아주므로 이득이 있다.
  - MyBatis 에는 안해도 된다.

* <if <foreach : ?

* select count(bno) vs. select count(*)
  - 일반적으로, 2번이 더 성능이 좋다.
  - 그러나, 그때 그때 다르다.
  - 인덱스를 타지 않고 랜덤 액세스가 빠를 때가 있다.
  - count(bno) 는 인덱스를 뒤질 수 있으므로, 데이터가 많을 때는 성능이 더 떨어질 수 있다.

* 검색 조건 재활용을 위해 sql fragment 이용

* 전자정부 4부터 : spring boot, react 사용 가능

* tomcat 9 jstl 과 tomcat 10 jstl 은 완전히 다르다.

* service side rendering vs. client side rendering

* unity 와 server side rendering

* 링크 누르면
  1) <a href 이용  -> End User는 1번
  2) javascript 이용  -> Admin은 2번. JS 문제. 검색엔지 최적화(SEO) 문제.
  -> 1번. 단, 강의는 2번으로 진행

* admin : 관리자용 사이트
  end : 고객용 사이트

? @Transactional 범위
  - 메서드에 lock을 걸고 못들어가게 할때, 클래스의 @Transactional의 역할은
  - or Nothing 은 어떻게...

* p160 JSTL, tomcat 10 버전 사용시 이걸 사용

* p161 <%@taglib prefix ="c" uri="http://java.sun.com/jsp/jstl/core" %> -> list.jsp
  -> 옛날 버전 썼을 때 에러남.

---

* Event 를 넣는 원칙 ★★★
  1) 태그 내에 이벤트 걸지 말 것
      - 예전에는 HTML main JS sub 요즘음 반대 -> DOM 과 JS 분리하라
  2) 이벤트 위임 고려
      - 이벤트 리스트를 링크마다 걸지 말것
      - 풍선 타워 디펜스 게임 -> 뒤로 갈수록 느려짐 -> DOM 핸들링을 많이 하지 말라
      - HTML4 까지: 브라우저는 HTML 뷰어 / HTML5 : 브라우저는 플랫폼
        -> 핵심은 JS, HTML은 보조 -> JS는 타입이 약하다 -> TS(TypeScript) 출현
      - JS는 '이벤트 루프'를 돌림 -> 사용자의 이벤트를 감지
        -> 그러므로 개발자는 로직(함수)를 파라미터로 전달 -> 화면에 이벤트가 적어야 한다.
        --> 이벤트는 바깥쪽 고정된 것에 걸어라.
        --> 각각의 페이지에 이벤트를 걸지 말고, 감싸고 있는 것(구조)에 이벤트를 걸어라.
  3) 이벤트 전파 고민
      - 이것 때문에 원하지 않는 동작이 일어남. ex) http://localhost:8080/board/6 페이지가 안나옴
      - a 태그는 정보를 연결하기 위한 태그이다. 이동. target을 _blank로 주면 새창이 뜸(ex. coupang)
        -> 새 태그를 띄운 이유 -> 서버의 부하 감소
      - preventDefault
      - stopPropagation
         - div A  -포함->  div B  -포함->  div C
           : C 클릭하면, C > B > A 순으로 버블링(<-> 캡쳐링/드릴링(A > B >C))

* id: 한 번 사용, class: 여러 번 사용 가능 -> class 가 유연

* 		e.preventDefault();
		e.stopPropagation();
  -> e.stopPropagation : 버블링 캡쳐링 하는거 막는것
  -> '페이지 번호' 클릭했을 때, 이동하지 않고, DevTools > Console에 로그만 찍혀야 함.

* (기능) 조회할 때 검색 조건이 계속 유지되게 하려면.

* SI 업체에서 사용하는 꼼수
  - 조회로 이동하는거 페이지 이동하는 거 list.jsp 에서 한번에 함.
  - <input type='hidden' name="page" value="${result.page} }">
    -> 이동할 때 페이지 번호가 따라옴.

* <tr data-bno="${board.bno}">
  - data-bno : 3rd party 라이브러리 그래프에서 많이 사용
  - HTML5 custom data 속성 : "data-" 로 시작. JS의 데이터를 HTML에서 표현하기 위해 사용.
  - (작업) 클릭한 tr의 bno 추출하여 이동
  - closest("tr") : 상위 엘리먼트들 중 가장 가까운 tr
  - formObj.action = 

* (비유) Model 은 카트(Cart)

* p108

* ch7 read.jsp 코드 가져와서 덮어쓰기
   - 이 코드의 단점
      1) 뒤로가기 해서 리스트를 본다면, OK
      2) list 버튼을 누르면 1페이지로 간다. page 파라미터를 못쓴다. -> 이걸 쓰게 해야 한다.
          - 쿼리스트링 정보 수집: @ModelAttribute("requestDTO") PageRequestDTO requestDTO
          - <a href='/board/list?page=${requestDTO.page}'>

※ React 라우팅 주의 : 새로고침해도 깨지지 않아야 한다.
      
* 지도
  - map.naver.com
  - tile을 특정 위치에 끼워넣는 방식
  - 과거의 웹은 배달 / 요즘의 웹은 밀키트
     -> 요리의 주도권이 고객임(Web 2.0), 서버는 데이터만 보내줌(XML(검사 가능), JSON)

* JSON 전달 방식: REST, GraphQL
  - RESTful 하다: 

* 대규모의 웹페이지 개발위해 등장 -> angular, react, vue

* com.fasterxml.jackson.core : java 객체 -> JSON
  com.fasterxml.jackson.datatype : LocalDateTime(from Java8) 처리

* (시험) DispatcherServlet ★★★

* 데이터 제공 목적 -> API 서버

* API 서버의 서비스 형태 2가지
  1) 내부 서비스: React, Next.js
      - 회사 <-> 협력사 : 전문(전자문서, 전자문서 교환)
      - 여기어때(인천) / 야놀자(제주) / 호텔컴파인(서울) - 보험사 : 고정된 업체(클라이언트)가 있다. -> 보안 안전, 리스크 적음 (천국)
  2) 공개 서비스
      - User Device - 협력사(API 서버: 많은 트래픽) (지옥: 보안, 트래픽, 확장, 안정성 고려해야 함)
  -> REST API 설계 전에 내부/공개 서비스를 고민해서 프로젝트를 시작해야 한다.
       ->어떻게???

* JWT
  - Access Token, Refresh Token
  - OAuth Authentication

* axios vs. fetch
  - axios : json 만 보낼 때 편함. axios 는 기본이 json.
  - fetch : file 도 보낼 경우 편함

* Spring @RestController
  - 리턴 타입이 특이함: ResponseEntity<DTO> 쓰는 것을 권장
  - ResponseEntity<DTO>를 쓰는 이유: 상태 코드를 제어할 수 있다.
  - 보통 Spring 리턴 타입은 void or String

* ReplyMapper.xml, ReplyMapper.java, ReplyDTO.java 복사

* ReplyController.java 생성

* 등록테스트
   - 1376222 : 게시물 번호 1개 파악

* 예전 코드
@Controller // Changed from @RestController
@RequestMapping("/replies")
@Log4j2
@RequiredArgsConstructor
public class ReplyController {
	private final ReplyService replyService;

	@PostMapping("")
	@ResponseBody // Added @ResponseBody to indicate the return value should be bound to the web response body
	public ResponseEntity<ReplyDTO> post(@RequestBody ReplyDTO replyDTO) { // Added @RequestBody for receiving JSON
		log.info("Received reply DTO: " + replyDTO);
		try {
			// Assuming replyService.register returns the created ReplyDTO
			ReplyDTO createdReply = replyService.register(replyDTO); 
			return new ResponseEntity<>(createdReply, HttpStatus.CREATED);
		} catch (Exception e) {
			log.error("Error creating reply: " + e.getMessage(), e);
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
}

* 최신 코드
questMapping("/replies")
@Log4j2
@RequiredArgsConstructor
public class ReplyController {
	private final ReplyService replyService;

	@PostMapping("")
	public ResponseEntity<ReplyDTO> post(@RequestBody ReplyDTO replyDTO) {
	}
}

* @RequestBody 
  -  json 데이터를 java 의 dto 로 바꾸어줌

* CURL 스크립트
댓글 
curl -X POST -H "Content-Type: application/json" -d '{
  "bno": 100,
  "replyText": "새로운 댓글입니다.",
  "replyer": "홍길동"
}' http://localhost:8080/replies

* 오류 수정
curl -X POST -H "Content-Type: application/json" -d "{\"bno\": 100,\"replyText\": \"New Reply.\",\"replyer\": \"HongGilDong\"}" http://localhost:8080/replies

* promise, async, await

* 동기: 순서, / 비동기: 진동벨 / 콜백(비동기 결과 받음)

* 콜백지옥 -해결-> promise, async, await
  - promise : 이 함수가 반환하는 건 진동벨?

* async, await : 6~7년전 출생
async function addReply(replyObj) {
	const res = await axios.post('http://localhost:8080/replies', replyObj);
	console.log(res);
}
- async 함수의 리턴은 무조건 promise
- async 안에서는 await 키워드를 활용해서 동기 코드처럼 작성 가능

- axios.post : 커피 주문 -> 결과오면 얘를 찍어줘...
- (await) const res = axios.post('http://localhost:8080/replies', replyObj); // Promise : 진동벨 줌

* undefined : 변수를 만들었지만, 사용하지 않았어!

* axios를 쓰는 이유
  1) 기본이 json 포맷: json 다룰 대 편함.
  2) async 함수는 진동벨(Promise)만 반환함.
     async 함수 내부에서 await 키워드를 이용하면 동기 코드 처럼 사용 가능
  3) async 함수를 결과를 이용하려면, ".then( result => " 이용

<산출물>
1. 게시판 URL 분석: get/post 방식 정리 ?
2. ReplyController 를 보고, excel 에 문서로 정리

<내일 일정>
1. 파일업로드
2. Spring Security
3. Spring 4.x 설명
4. 사후 평가

* 










   

















